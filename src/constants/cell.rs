use super::BarcodeMap;
use disambiseq::Disambibyte;
use hashbrown::HashMap;

pub struct CellBarcodes {
    map: Option<BarcodeMap>,
    dsq: Option<Disambibyte>,
}
impl CellBarcodes {
    pub fn new_exact() -> Self {
        let mut map = HashMap::with_capacity(CELL_BARCODES.len());
        CELL_BARCODES.iter().for_each(|x| {
            let bytes = x.as_bytes().to_vec();
            map.insert(bytes.clone(), bytes);
        });
        Self {
            map: Some(map),
            dsq: None,
        }
    }

    pub fn new_oneoff() -> Self {
        let reference = CELL_BARCODES
            .iter()
            .map(|x| x.as_bytes().to_vec())
            .collect::<Vec<Vec<u8>>>();
        let dsq = Disambibyte::from_slice(&reference);
        Self {
            map: None,
            dsq: Some(dsq),
        }
    }

    pub fn contains(&self, barcode: &[u8]) -> Option<&[u8]> {
        if self.map.is_some() {
            self.match_exact(barcode)
        } else if self.dsq.is_some() {
            self.match_oneoff(barcode)
        } else {
            panic!("CellBarcodes not initialized correctly");
        }
    }

    fn match_exact(&self, bc: &[u8]) -> Option<&[u8]> {
        let map = self.map.as_ref().unwrap();
        map.get(bc).map(|x| &x[..])
    }

    fn match_oneoff(&self, bc: &[u8]) -> Option<&[u8]> {
        let dsq = self.dsq.as_ref().unwrap();
        if let Some(bc) = dsq.get_parent(bc) {
            Some(bc.sequence())
        } else {
            None
        }
    }
}

const CELL_BARCODES: [&str; 384] = [
    "TCCTACCAGT",
    "GCGTTGGAGC",
    "GATCTTACGC",
    "CTGATGGTCA",
    "CCGAGAATCC",
    "GCCGCAACGA",
    "TGAGTCTGGC",
    "TGCGGACCTA",
    "ACGGAGGCGG",
    "TAGATCTACT",
    "AATTAAGACT",
    "TTATTCATTC",
    "TTGACTTCAG",
    "AGAGCTATAA",
    "CTAAGAGAAG",
    "ACTCAATAGG",
    "CTTGCGCCGC",
    "GGTACTGCCT",
    "TAGAATTAAC",
    "GCCATTCTCC",
    "TGCCGGCAGA",
    "TTACCGAGGC",
    "ATCATATTAG",
    "TGGTCAGCCA",
    "ACTATGCAAT",
    "CGACGCGACT",
    "GATACGGAAC",
    "TTATCCGGAT",
    "TAGAGTAATA",
    "GCAGGTCCGT",
    "TCGGCCTTAC",
    "AGAACGTCTC",
    "CCAGTTCCAA",
    "ACTTAACCTT",
    "CAACCGCTAA",
    "GACCTTGATA",
    "TCTGATACCA",
    "GAAGATCGAG",
    "AAGAAGCTAG",
    "TCCGGCCTCG",
    "AGAGAAGGTT",
    "CATACTCCGA",
    "GCTAACTTGC",
    "GGCTGAGCTC",
    "CCGATTCCTG",
    "ACCGCCAACC",
    "ATAAGGAGCA",
    "CGAACGCCGG",
    "GGTATGCTTG",
    "AACCTGCGTA",
    "GGCAGACGCC",
    "TAGCCGTCAT",
    "CTAGTAGTCT",
    "ACGCGAGATT",
    "GGTATCCGCC",
    "AACTAGGCGC",
    "TCGCTAAGCA",
    "TATATACTAA",
    "ACTTGCTAGA",
    "AACCATTGGA",
    "TCGCGGTTGG",
    "CGTAGTTACC",
    "TCCAATCATC",
    "AATCGATAAT",
    "CCATTATCTA",
    "TCAACGTAAG",
    "TCTAATAGTA",
    "GATCGCTTCT",
    "CTAACTAGAT",
    "GCTGGAACTT",
    "AGGTTAGTTC",
    "CATTCGACGG",
    "CATTCAATCA",
    "CGGATTAGAA",
    "ATCGGCTATC",
    "ACGAAGTCAA",
    "TTACCTCGAC",
    "GGAGGATAGC",
    "GGCTCTCTAT",
    "CGGTCAAGAA",
    "CGCTCCTAAC",
    "ATCCATGACT",
    "AACCTGGTCT",
    "GGTACCGGCA",
    "AAGCCAGTTA",
    "TCTTGCCGAC",
    "AAGACCGTTG",
    "AGGTTAGCAT",
    "TTCGCCTCCA",
    "AGAGCCAAGG",
    "AATACCATCC",
    "AGCTCTCCTC",
    "AGCTTATCCG",
    "CATCTCTGCA",
    "ACCTGGCCAA",
    "TAACTGGTTA",
    "TTGCTAACGG",
    "ACTAGAGAGT",
    "AATGCCGCTT",
    "TATAGACGCA",
    "TCAATCGCAT",
    "TTCTTAATAA",
    "GTCCTAGAGG",
    "ATATTGATAC",
    "CCGCTGCCAG",
    "CAATTACCGT",
    "GGCCGTAGTC",
    "TAATGAACGA",
    "CCGTTCCTTA",
    "ATGGCTCTGC",
    "GTATAATACG",
    "GGCGAACTCG",
    "TTAATTGAAT",
    "TTAGGACCGG",
    "AAGTAAGAGC",
    "CCTTGGTCCA",
    "CATCAGAATG",
    "TTATAGCAGA",
    "TTACTTGGAA",
    "GCTCAGCCGG",
    "ACGTCCGCAG",
    "TTGCGAGGCA",
    "TTCCAACCGC",
    "TCAAGCCGAT",
    "CTTGCAACCT",
    "CCATCGCGAA",
    "TAGACTTCTT",
    "GTCCTTAAGA",
    "AGTAACGGTC",
    "GTTCGTCAGA",
    "CGCCTAATGC",
    "ACCGGAATTA",
    "TAGGCCATAG",
    "TAACTCTTAG",
    "TATGAGTTAA",
    "TATCATGATC",
    "GAGCATATGG",
    "TAACGATCCA",
    "CGGCGTAACT",
    "CGTCGCAGCC",
    "GTAGCTCCAT",
    "GTCCTACTTG",
    "GGTAGGTTAG",
    "GAGCATCATT",
    "CCGCTCCGGC",
    "TTCTTCCGGT",
    "AGGAGAGAAC",
    "TAACTCAATT",
    "ACTATAGGTT",
    "AGGTATACTC",
    "TTCATAGGAC",
    "GGAGGCCTCC",
    "TTCAATATAA",
    "ACGTCATATA",
    "CGGTTGCGCG",
    "CAAGGAGGTC",
    "TTACGATGAA",
    "TTGCTGGCAT",
    "ATTCGACCAA",
    "CCGCGGCTCA",
    "GTTACGCAAG",
    "AGCCGGTACC",
    "ACCTCTATCT",
    "GGACTACTAC",
    "GTATCATCGA",
    "CCGCGATTAT",
    "ATTCAGGTAC",
    "ATGGAATTGG",
    "GACGAAGCGT",
    "CTTGCAGTAG",
    "CTTGGTAATG",
    "CAAGTCGACC",
    "TAACGAATTG",
    "TTATTCTGAG",
    "TTATTATGGT",
    "ATATGAGCCA",
    "CAACCAGTAC",
    "CATCCGACTA",
    "CCGCAAGTTC",
    "CAGGAGGAGA",
    "GATATCGGCG",
    "CCAGTCCTCT",
    "CATAGTTCGG",
    "CGTAATGCAG",
    "CCGTTCGGAT",
    "CCATAAGTCC",
    "GGCAATGAGA",
    "CGGTTATGCC",
    "TGGCCGGCCT",
    "AGCTGCAATA",
    "TGGCCATGCA",
    "TGACGCTCCG",
    "AACTGCTGCC",
    "TGCGCGATGC",
    "ATTGAGATTG",
    "TTGATATATT",
    "CGGTAGGAAT",
    "ACCAGCGCAG",
    "AGTTCGAGTA",
    "TTGGACGCTG",
    "ATAGACTAGG",
    "TATAGTAAGC",
    "CGGTCGTTAA",
    "ATGGCGGATC",
    "CTCTGATCAG",
    "GGCCAGTCCG",
    "CGGAAGATAT",
    "TGGCTGATGA",
    "GAAGGTTGCC",
    "GTTGAAGGAT",
    "TGCGCCAGAA",
    "CGAATAATTC",
    "GCGACGCCTT",
    "ATCAACGATT",
    "GTTCTGAATT",
    "GCTAACCTCA",
    "GGAGCGGCCG",
    "CGCGTACGAC",
    "CGATGGCGCC",
    "TGGTATTCAT",
    "GATAAGGCAA",
    "GCCGGTCGAG",
    "TGCGCCATCT",
    "AAGTCTTCCG",
    "AGACTCAAGC",
    "GCAGGCGACG",
    "AATACTCTTC",
    "CCAACTAACC",
    "TATCCTCAAT",
    "GCCGTCGCGT",
    "AATGCTAGTC",
    "GACGACCTGC",
    "AGAGCCAGCC",
    "CCAGGCCGCA",
    "CAGGTATGGA",
    "TTAATTATTG",
    "CCGTTGACTT",
    "GCCAGGATCA",
    "CTTCGGCGCA",
    "CAAGGCATTC",
    "CGGATGAAGG",
    "TATCGTCGGC",
    "GCCGTATGCT",
    "CTGAACTGGT",
    "CATAACCAGC",
    "AAGTTGCCAT",
    "AGGCCGCTCG",
    "GTACTAGTAA",
    "GCGCGGTAGT",
    "CTGGATTAGT",
    "TTGGATCCTT",
    "TTGGAATCTC",
    "ACCTGGACGC",
    "GCGTTCAGCT",
    "TTAGCAATAA",
    "TTGATGCTAT",
    "CTCTGCGGCA",
    "AATAATACCA",
    "ACGCCGTTCA",
    "TTCGCTTACG",
    "TACGGCTACG",
    "TTCTTATCGA",
    "TTCCATGGCA",
    "AAGTAGTCAG",
    "TCAGCTCTAA",
    "CGAATAGATG",
    "CGGAGATCCG",
    "ACCGCAGAAT",
    "TCTCCTATAA",
    "AAGACGGCCA",
    "GCCAACGCCA",
    "TCTACCATTA",
    "TTACGTATAC",
    "ACTTAACTAG",
    "GCAGACCGGT",
    "TGAGTCCAGA",
    "TGGAGAATTC",
    "GGCGAGCTTA",
    "TCGAGGAGTA",
    "CCTTACTCCT",
    "TCAGACGAAC",
    "CCGTCCAGTA",
    "GTTCCGCTAA",
    "CAGATTCGAT",
    "TGCATATAAC",
    "TAGGCAGATA",
    "TATGCCGAGT",
    "ATAGTCGTAG",
    "GGATGCAGCA",
    "CCGCTATATT",
    "ATCGAGTCGC",
    "GCGACGCAGA",
    "AATGGTCGAC",
    "TGGAACTAGA",
    "GTCCAACTCA",
    "TTATAAGAAC",
    "CAAGCTTCAT",
    "CTGATTAAGA",
    "TACTTACTTA",
    "GGATCTGCAG",
    "ATGCAATATG",
    "ACTGCCGATA",
    "TCCAGAAGGT",
    "TTCAAGACCA",
    "TATTACTCAT",
    "AACTGATCTT",
    "CCGCGGACCG",
    "AATACGCAGG",
    "GGTCGCGTCA",
    "AATTATCAGC",
    "ATTGCGCTGA",
    "AGCTAAGGTA",
    "TCGTAGAGAA",
    "TGATGGCCTT",
    "TGGAAGTACC",
    "AGATATATCG",
    "CATGCTGGTT",
    "GCAAGGAATA",
    "GGCATAGCTT",
    "AGTAAGCATA",
    "CGCCTCGAAC",
    "TTAGGATCTA",
    "ACTACTGAAG",
    "AATCTGGAGT",
    "CTCGATGGAG",
    "GTTGACGGCC",
    "CTCGTCTAGG",
    "GCTCTAACGA",
    "TGATAGAACG",
    "TTAGATTCCG",
    "TCGATATTGA",
    "CCAGGTCTAC",
    "TTGGTCATAA",
    "AACGGACCAA",
    "TTAACGTACC",
    "GGACTCATTG",
    "GAACTGCATC",
    "ACTCTCTCAA",
    "GTCGCTCAGT",
    "CCGTCGGAGG",
    "AGCGTCAATG",
    "TTGAGTATCA",
    "TGAGGTAGAA",
    "GACTAGTCTA",
    "CTGCTTCGAC",
    "CCTAGCGCCT",
    "AGTTGCATCT",
    "AATTGCCTAC",
    "CGCCGCCTCC",
    "CAAGTACTGG",
    "CGGCGAGACC",
    "GACCTCCGCC",
    "TCTAGAACTA",
    "CGATCATTAC",
    "GACCTCTCTG",
    "GGCTAATTAA",
    "GATGATCGTA",
    "GCTCTCGCCT",
    "ACTATCTTGA",
    "AGGTCAATTA",
    "AAGCCGGCTG",
    "CATGCATCTC",
    "TCCGGTAATC",
    "ACCGTTACGA",
    "TCCGTCGCCA",
    "GGCTATGACT",
    "ACTTCCGAAT",
    "AACTACCGAC",
    "CGTCCGTCCT",
    "GGTCCAGGAG",
    "AACGAGGCTA",
    "ACGTTCAACC",
    "ACGAGGACCT",
    "AACCTAGCTT",
    "AGTCCGCGGA",
    "ACTATCCGCA",
    "CGAGCTGCCA",
    "GTCATTGCGC",
    "CAAGATTAAG",
    "ACGCAACTCC",
    "TGATACGAGT",
    "CATTATTACC",
    "TCTATAAGGA",
    "TTGGAGTCGG",
];
